name: e2e test
description: "E2E test action"
inputs:
  binary-path:
    required: true
    description: "the path of the binary to be tested"
runs:
  using: composite
  steps:
    - name: (setup) copy default config to home
      shell: powershell
      run: New-Item -ItemType Directory -Force -Path $env:USERPROFILE\.config\nodex; Copy-Item test_resource\localhost_config\* $env:USERPROFILE\.config\nodex\

    - name: Start mock server
      shell: powershell
      run: |
        $mockServerDir = Join-Path -Path $PWD -ChildPath "test_resource\mock_studio"
        if (-not (Test-Path $mockServerDir)) {
            New-Item -ItemType Directory -Force -Path $mockServerDir
        }

        $mockServerOutLogPath = Join-Path -Path $mockServerDir -ChildPath "mock_studio_out.log"
        $mockServerErrLogPath = Join-Path -Path $mockServerDir -ChildPath "mock_studio_err.log"

        # Change to the mock server directory
        Push-Location $mockServerDir

        # Start the mock server with PORT=8020
        $env:PORT = "8020"
        $mockServerProcess = Start-Process -FilePath "npm" -ArgumentList "start" -NoNewWindow -PassThru -RedirectStandardOutput $mockServerOutLogPath -RedirectStandardError $mockServerErrLogPath

        # Save the process ID for later cleanup
        $mockServerProcess.Id | Out-File -FilePath "mock_studio.pid"

        # Return to the original directory
        Pop-Location

        # Wait for the mock server to start
        Write-Host "Waiting for mock server to start on port 8020..."
        $maxRetries = 60
        $retryCount = 0
        $serverStarted = $false

        while (-not $serverStarted -and $retryCount -lt $maxRetries) {
            try {
                $connection = New-Object System.Net.Sockets.TcpClient("127.0.0.1", 8020)
                if ($connection.Connected) {
                    $serverStarted = $true
                    Write-Host "Mock server is up and running on port 8020"
                }
                $connection.Close()
            } catch {
                $retryCount++
                Start-Sleep -Seconds 5
            }
        }

        if (-not $serverStarted) {
            Write-Host "Timed out waiting for mock server to start"
            if (Test-Path $mockServerOutLogPath) {
                Get-Content $mockServerOutLogPath
            }
            if (Test-Path $mockServerErrLogPath) {
                Get-Content $mockServerErrLogPath
            }
            exit 1
        }

    - name: Setup and Run Tests
      shell: powershell
      run: |
        $agentPath = Join-Path -Path $PWD -ChildPath ${{ inputs.binary-path }}
        $stdErrLogTmp = Join-Path -Path $PWD -ChildPath ".\stderr.log"
        $stdOutLogTmp = Join-Path -Path $PWD -ChildPath ".\stdout.log"

        New-Item -ItemType File -Force -Path $stdOutLogTmp
        New-Item -ItemType File -Force -Path $stdErrLogTmp

        Start-Process -FilePath "$agentPath" -NoNewWindow -RedirectStandardOutput "$stdOutLogTmp" -RedirectStandardError "$stdErrLogTmp"
        Start-Sleep -Seconds 10

        cd e2e
        cargo test
      env:
        NODEX_DID_HTTP_ENDPOINT: http://127.0.0.1:8020
        NODEX_DID_ATTACHMENT_LINK: http://127.0.0.1:4010
        NODEX_STUDIO_HTTP_ENDPOINT: http://127.0.0.1:8020
        NODEX_SERVER_PORT: 3000
        RUST_BACKTRACE: full

    - name: Stop mock server
      shell: powershell
      run: |
        $mockServerPidFile = Join-Path -Path $PWD -ChildPath "test_resource\mock_studio\mock_studio.pid"
        if (Test-Path $mockServerPidFile) {
            $pid = Get-Content $mockServerPidFile
            try {
                Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue
                Write-Host "Mock server process (PID: $pid) stopped"
            } catch {
                Write-Host "Failed to stop mock server process or process already stopped"
            }
            Remove-Item $mockServerPidFile -Force -ErrorAction SilentlyContinue
        }
      if: ${{ always() }}

    - name: (run) show log of agent
      shell: powershell
      run: |
        $stdOutLogTmp = Join-Path -Path $PWD -ChildPath ".\stdout.log"
        if (Test-Path $stdOutLogTmp) {
            Get-Content $stdOutLogTmp
        } else {
            Write-Host "Warning: stdout.log does not exist"
        }

        $stdErrLogTmp = Join-Path -Path $PWD -ChildPath ".\stderr.log"
        if (Test-Path $stdErrLogTmp) {
            Get-Content $stdErrLogTmp
        } else {
            Write-Host "Warning: stderr.log does not exist"
        }
      if: ${{ always() }}

    - name: (run) show log of mock server
      shell: powershell
      run: |
        $mockServerOutLogPath = Join-Path -Path $PWD -ChildPath "test_resource\mock_studio\mock_studio_out.log"
        $mockServerErrLogPath = Join-Path -Path $PWD -ChildPath "test_resource\mock_studio\mock_studio_err.log"

        if (Test-Path $mockServerOutLogPath) {
            Write-Host "=== Mock Server Standard Output ==="
            Get-Content $mockServerOutLogPath
        } else {
            Write-Host "Warning: mock_studio_out.log does not exist"
        }

        if (Test-Path $mockServerErrLogPath) {
            Write-Host "=== Mock Server Standard Error ==="
            Get-Content $mockServerErrLogPath
        } else {
            Write-Host "Warning: mock_studio_err.log does not exist"
        }
      if: ${{ always() }}
