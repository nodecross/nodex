name: e2e test
description: "E2E test action"
inputs:
  binary-path:
    required: true
    description: "the path of the binary to be tested"
runs:
  using: composite
  steps:
    - name: (setup) copy default config to home
      shell: bash
      run: mkdir -p ~/.config/nodex && cp -r test_resource/localhost_config/network.json ~/.config/nodex/

    - name: Start mock studio
      shell: bash
      run: |
        cd test_resource/mock_studio
        PORT=8020 cargo run > mock_studio.log 2>&1 &
        echo $! > mock_studio.pid

        echo "Waiting for mock server to start on port 8020..."
        for i in {1..60}; do
          if nc -z localhost 8020; then
            echo "Mock server is up and running on port 8020"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "Timed out waiting for mock server to start"
            cat mock_studio.log
            exit 1
          fi
          sleep 5 
        done

    - name: Setup and Run Tests
      shell: bash
      run: |
        ${{ inputs.binary-path }} controller > log.txt 2>&1 &
        sleep 5

        cd e2e
        cargo test

        pgrep -f "nodex-agent controller" | xargs kill -SIGINT
        sleep 5

        if !grep -q "SIGINT" log.txt; then
          echo "SIGINT not found in log."
          exit 1
        fi

        pids=$(pgrep -f "nodex-agent controller" || true)
        # When executing pgrep, if the process does not exist, it exits; therefore, a solution for that is needed.
        if [ -z "$pids" ]; then
          echo "Process not found, as expected."
        else
          echo "Process is still running, which is not expected."
          exit 1
        fi
      env:
        NODEX_DID_HTTP_ENDPOINT: http://localhost:8020
        NODEX_DID_ATTACHMENT_LINK: http://localhost:4010
        NODEX_STUDIO_HTTP_ENDPOINT: http://localhost:8020
        RUST_BACKTRACE: full

    - name: Stop mock studio
      shell: bash
      run: |
        if [ -f test_resource/mock_studio/mock_studio.pid ]; then
          kill $(cat test_resource/mock_studio/mock_studio.pid)
          rm test_resource/mock_studio/mock_studio.pid
        else
          echo "Mock server PID file not found."
        fi
      if: ${{ always() }}

    - name: (run) show log of agent
      shell: bash
      run: cat log.txt
      if: ${{ always() }}

    - name: (run) show log of mock studio
      shell: bash
      run: cat test_resource/mock_studio/mock_studio.log
      if: ${{ always() }}
